/**
 * loadResource.
 * @param type 	type of resource.
 * @param src 	source of resource.
 */
function loadResource(type,src,pos){
	var res = false;
	if(type=='js'){
		res = document.createElement('script');
		res.type = "text/javascript";
		res.src = src;
		//res.onload = callback1;
	} else if(type=='css'){
		res = document.createElement('link');
		res.rel = "stylesheet";
		res.href = src;
	}
	
	if(res){
		if(pos=="ebody"){
			document.body.appendChild(res);
		}
		else{
			document.getElementsByTagName('head')[0].appendChild(res);
		}
	}
	else{
		console.log("the resource is not loaded!");
	}	
}

if (typeof trace === 'undefined') {
	trace = {};
}

trace.StartUI = function (container){
	this.container = container;
	this.icon = null;
	this.active = false;
	this.visualisationUI = false;
	
	this.open = open;
	open = function(){
		
	};
	
	node = document.createElement("input");
	node.type = 'button';
	node.id = 'traceicon';
	node.value = 'Trace';
	node.setAttribute('class','btn btn-primary');
	startUI = this;	
	this.container.appendChild(node);
	node.onclick = function(){
		//alert("click");
		
		if(!startUI.visualisationUI){
			startUI.visualisationUI = new trace.VisualisationUI();
		} else{
			startUI.visualisationUI.show();
		}
	};
	this.node = node;
};

trace.VisualisationUI = function(){
	this.autoOpen = true;
	this.timeline = null;
	
	var modal = new trace.Modal();
	modal.createModal();
	this.modal = modal;
	
	if(this.autoOpen){
		
		
		modal.setModal("Trace", function(){});
		modal.show();
		//this.timeline = new trace.Timeline($(modal.node).find('.modal-body')[0]);
		//this.timeline.draw();
		this.timeline = new trace.TimelineSVG($(modal.node).find('.modal-body')[0]);
		this.timeline.draw();
	}
	this.close = function(){
		//alert("close");
	};
	this.show = function(){
		modal.show();
	};
	
};

/**
 * Created by Hoang, SILEX
 */
// loading scritps and styles
var ozatrace_prefix = window.location.protocol + "//" + window.location.host + "/ozalid/";
if(!window.jQuery){	
	loadResource("js",ozatrace_prefix + "trace/jquery.js");
}



loadResource("js",ozatrace_prefix + "trace/collector.js");
loadResource("css",ozatrace_prefix + "trace/css/timeline.css");
loadResource("js",ozatrace_prefix + "trace/timeline.js");
//loadResource("js",ozatrace_prefix + "trace/visualisation.js");
//loadResource("css",ozatrace_prefix + "trace/jquery-ui/css/no-theme/jquery-ui.css");
//loadResource("js",ozatrace_prefix + "trace/jquery-ui/js/jquery-ui.js","ebody");


trace.Modal = function(){
	this.modal = null;
	
	this.createModal = function (){
		var dialog 
				= '<div id="traceModal" class="modal hide fade" style="width:80%;height:300px;left:20%">';
	    dialog += '<div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button><h3></h3></div>';
	    dialog += '<div class="modal-body"></div>';
	    dialog += '<div class="modal-footer"><button class="btn btn-primary callback-btn" data-dismiss="modal">Close</button></div></div>';	    
	    $('body').append(dialog);
	    
	    var btPanForward = '<button id="pan_forward" class="btn">Pan Forward </button>';
		var btPanBackward = '<button id="pan_backward" class="btn">Pan Backward </button>';
		var btZoomIn = '<button id="zoom_in" class="btn">Zoom In </button>';
		var btZoomOut = '<button id="zoom_out" class="btn">Zoom Out </button>';
		var gButtonLayout = '<div class="btn-group pull-right">&content</div>';
		var gButton = [btPanBackward, btPanForward, btZoomIn, btZoomOut].join("");
		var btnGroup = gButtonLayout.replace("&content", gButton);
		$('#traceModal').find(".modal-body").append(btnGroup);
		// bind events
		$("#pan_forward").click(function(){
			var movestep = 100;
			//alert("avant le modification");
			$("#svg1").get(0).changePosition(+movestep);
			//alert("apres le modification");

		});
		$("#pan_backward").click(function(){
			var movestep = -100;
			//alert("avant le modification");
			$("#svg1").get(0).changePosition(movestep);
			//alert("apres le modification");
		});
		$("#zoom_in").click(function(){
			$("#svg1").get(0).zoom(1.25);
		});
		$("#zoom_out").click(function(){
			$("#svg1").get(0).zoom(0.8);
		});
		
	    
	    this.node = $("#traceModal")[0];
	};
	
	this.setModal = function (header, text, callback) {
	    $(this.node)
	      .find('.modal-header > h3').text(header).end()
	      //.find('.modal-body').text(text).end()
	      .find('.callback-btn').off('click.callback')
	        .on('click.callback', callback);
	  };
	this.show = function(){
		$(this.node).modal('show');
	};
};

trace.KtbsSync = function(trace_uri,model_uri){
	this.trace_uri = trace_uri;
	this.model_uri = model_uri;
	
	this.getNewObsel = function(){
		var newobsels = [];
		var obsels = JSON.parse(localStorage["obselset"]);
		$(obsels).each(function(index,item){
			if(item.lc_status!="sent"){
				item["lc_index"] = index;// marker for retrieving the item in localStorage
				newobsels.push(item);
			}			
		});
		return newobsels;		
	};
	
	this.toTurtle = function(item){
		var id = item["type"] + Math.floor(Math.random()*1000);
		
		
		var prefixes = [];
		prefixes.push("@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .");
		prefixes.push("@prefix ktbs: <http://liris.cnrs.fr/silex/2009/ktbs#> .");
		prefixes.push("@prefix : <"+this.model_uri+"> .");
				
		var statements = [];
		statements.push("<"+id+"> a <"+item["type"]+">.");
		statements.push("<"+id+"> ktbs:hasTrace <> .");		
		statements.push("<"+id+"> ktbs:hasBeginDT \""+item["start"]+"\"^^xsd:dateTime .");
		statements.push("<"+id+"> ktbs:hasEndDT \""+item["start"]+"\"^^xsd:dateTime .");		
		
		// TODO
		
		return prefixes.join("\n")+"\n"+statements.join("\n");
	};
	
	this.toKtbs = function(){
		var newobsels = this.getNewObsel();
		
		for(var i=0;i<newobsels.length;i++){
			var newobsel = newobsels[i];
			var data = this.toTurtle(newobsel);
			
			this.post(this.trace_uri,data,newobsel["lc_index"]);
		}		
	};
	
	this.post = function (url,data,item) {
		//var data = data;
		//var ctype = "text/turtle";
		
		$.post(url, {'m': data}, function(ret){
			if(ret=="201"){
				var obselset = JSON.parse(localStorage["obselset"]);
				obselset[item]["lc_status"] = "sent";
				localStorage["obselset"] = JSON.stringify(obselset);// save
			}
		});		
	};
	
};

trace.Job = function(func,interval){
	
	this.running = true;
	//this.func = func;
	this.stop = function(){
		this.running = false;
	};
	
	this.run = function(){
		if(this.running){
			func();
			setTimeout(this.run,interval);
		}
	};
};

//Called when the Visualization API is loaded.
trace.Timeline = function(container){
	this.container = container;
	this.el = null;
	
	this.draw = function(){
		var obselset = JSON.parse(localStorage["obselset"]);
		
		// Create a JSON data table
		data = [];
		for(var i=0; i<obselset.length;i++){
			var obsel = obselset[i];
			var item = new trace.TimelineItem();
			item = item.parseObsel(obsel);
			data.push(item);
		}

		// specify options
		var options = {
			'width':  '100%',
			'height':  '200px',
			'editable': false,   // enable dragging and editing events
			'style': 'box',
			'groupsChangeable' : true,
	        'groupsOnRight' : false,
			'showNavigation': true
		};

		// Instantiate our timeline object.
		node = new links.Timeline(this.container);
		
		// Draw our timeline with the created data and options
		node.draw(data, options);
		this.el = node;
	};
	
	this.update = function(){
		var obselset = JSON.parse(localStorage["obselset"]);
		if (obselset.length>data.length){
			for(var i= data.length; i<obselset.length;i++){
				var obsel = obselset[i];
				var item = new trace.TimelineItem();
				item = item.parseObsel(obsel);
				this.el.addItem(item);
			}		
		}	
	};	
};

trace.TimelineItem = function (){
	
	this.parseObsel = function (obsel){
		
		var icon = '<img src="http://icons.iconarchive.com/icons/everaldo/crystal-clear/16/App-key-bindings-icon.png" style="width:16px; height:16px;">';
		var group = "keypress";
		if (obsel["type"]=="click"){
			icon = '<img src="http://findicons.com/files/icons/1033/retrofukation/24/mouse.png" style="width:16px; height:16px;">';
			group = "mouse";
		}
				
		var item = {
			'start': new Date(obsel["start"]),
			'content': icon,
			'group': group 
		};
		return item;
	};
};

trace.TimelineSVG = function(container){
	var container = container;
	this.el = null;
	
	this.draw = function(){		
		var svg = document.createElementNS("http://www.w3.org/2000/svg","svg");
		svg.setAttribute("id","svg1");
		svg.setAttribute("version","1.1");
		//svg.setAttribute("viewbox","0 0 1000 200");
		svg.setAttribute("height","200");
		svg.setAttribute("width","100%");
		//svg.setAttribute("width","100%");
		container.appendChild(svg);
		
		
		var width = $(svg).width();
		
		svg["begin"] = (new Date()).getTime();
		svg["step"] = {"screen": 50,"time":1000};
		svg["scale"] = 0.05;// pixel/milliseconds
		svg["end"] = svg["begin"] + Math.floor(width/svg["scale"]);				
		svg["grid"] = new Object();
		svg["obselset"] = new Object();
		svg["step_level"] = [1,10,100,1000,10000,60000,600000,3600000];		
		
		
		svg.appendGridline = function(time){
			var width = $(svg).width();
			var height = $(svg).height();
			var begin = svg["begin"];
			var end = svg["end"];
			var scale = svg["scale"];
			
			var x = Math.floor((time - begin)*scale);
			var date = new Date(time);
						
			if(time%60000==0){
				var axis_grid_major = document.createElementNS("http://www.w3.org/2000/svg", "line");
				axis_grid_major["time"] = time;
				axis_grid_major.setAttributeNS(null, "id", "lineM"+time);
				axis_grid_major.setAttributeNS(null, "x1", x);
				axis_grid_major.setAttributeNS(null, "y1", height-10);
				axis_grid_major.setAttributeNS(null, "x2", x);
				axis_grid_major.setAttributeNS(null, "y2", 5);
				axis_grid_major.setAttributeNS(null, "style", "stroke: #E5E5E5");
				svg.appendChild(axis_grid_major);
				svg["grid"]["lineM"+time] = axis_grid_major;
				
				var text1 = document.createElementNS("http://www.w3.org/2000/svg", "text");
				text1["time"] = time;
				text1.setAttributeNS(null, "id", "txtM"+time);
				text1.setAttributeNS(null, "x", x+5);
				text1.setAttributeNS(null, "y", height-10);
				text1.setAttributeNS(null, "fill", "green");
				text1.textContent = date.toString();
				svg.appendChild(text1);
				svg["grid"]["txtM"+time] = text1;
				
			}else{
				var axis_grid_minor = document.createElementNS("http://www.w3.org/2000/svg", "line");
				axis_grid_minor["time"] = time;
				axis_grid_minor.setAttributeNS(null, "id", "line"+time);
				axis_grid_minor.setAttributeNS(null, "x1", x);
				axis_grid_minor.setAttributeNS(null, "y1", height-20);
				axis_grid_minor.setAttributeNS(null, "x2", x);
				axis_grid_minor.setAttributeNS(null, "y2", 5);
				axis_grid_minor.setAttributeNS(null, "style", "stroke: #E5E5E5");
				svg.appendChild(axis_grid_minor);
				svg["grid"]["line"+time] = axis_grid_minor;
			}
			
			var text = document.createElementNS("http://www.w3.org/2000/svg", "text");
			text["time"] = time;
			text.setAttributeNS(null, "id", "txt"+time);
			text.setAttributeNS(null, "x", x+5);
			text.setAttributeNS(null, "y", height-20);
			text.setAttributeNS(null, "fill", "green");
			text.textContent = date.getSeconds();
			svg.appendChild(text);
			svg["grid"]["txt"+time] = text;
			
			console.log("append time:"+time);
		};
		
		svg.drawGrid = function(){
			var width = $(svg).width();
			var height = $(svg).height();
			
			var axis_line = document.createElementNS("http://www.w3.org/2000/svg", "line");
			axis_line.setAttributeNS(null, "x1", "0");
			axis_line.setAttributeNS(null, "y1", height-30);
			axis_line.setAttributeNS(null, "x2", width);
			axis_line.setAttributeNS(null, "y2", height-30);
			axis_line.setAttributeNS(null, "style", "stroke: green");
			svg.appendChild(axis_line);
			
			var begin = svg["begin"];
			var end = svg["end"];
			var scale = svg["scale"];
			var timeStep = svg["step"]["time"];			
			var scrStep = Math.floor(timeStep*scale);
			
			var date0 = new Date(begin);
			date0.setMilliseconds(0);			
			var time0 = date0.getTime();			
			
			for(var time=time0;time<=end;time+=timeStep){								
				if(time>=begin){
					svg.appendGridline(time);
				}
			}
		};
		svg.drawGrid();
		
		svg.drawObsel = function(){
			var obselset = JSON.parse(localStorage["obselset"]);
			if(!obselset) return;
			
			var width = $(svg).width();
			var height = $(svg).height();			
			var begin = svg["begin"];
			var end = svg["end"];
			var scale = svg["scale"];
			var timeStep = svg["step"]["time"];			
			var scrStep = Math.floor(timeStep*scale);				
			
			for(var i=0;i<obselset.length;i++){
								
				var date = obselset[i]["start"];
				var date = new Date(date);// copy
				var x = Math.floor((date.getTime() - begin)*scale);
				
				var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
				var id = "obsel"+date.getTime()+Math.floor(Math.random()*10);
				circle.setAttributeNS(null, "time", date.getTime());
				circle.setAttributeNS(null, "id", id);
				circle.setAttributeNS(null, "cx", x);
				circle.setAttributeNS(null, "cy", height - 20 - 1*40);
				circle.setAttributeNS(null, "r", "10");
				circle.setAttributeNS(null, "fill", "green");
				svg.appendChild(circle);
				
				svg["obselset"][id] = circle;
			};
		};
		svg.drawObsel();
		
		svg.changePosition = function(deltax){
			var width = $(svg).width();
			var height = $(svg).height();
			var begin = svg["begin"];
			var end = svg["end"];
			var scale = svg["scale"];
			var timeStep = svg["step"]["time"];			
			var scrStep = Math.floor(timeStep*scale);
			
			var deltatime = Math.floor((deltax/scrStep)*timeStep);
			
			var begin1 = deltatime + begin;
			var end1 = deltatime + end;
						
			var grid = $(svg).get(0)["grid"];
			var obselset = $(svg).get(0)["obselset"];
						
			for(var name in grid){
				if(!name) continue;
				time = parseInt(grid[name]["time"]);
				if(time>end1 || time<begin1){
					delete grid[name];
					$("#"+name).remove();
					console.log("remove "+ time);
				}
			};
			
			var time0 = Math.floor(begin1-(begin1%timeStep));
			for (var time=time0;time<=end1;time+=timeStep){								
				if(time>=begin1){
					if($("#line"+time).length==0 && $("#lineM"+time).length==0){
						this.appendGridline(time);
					}
				}
			}
			this.moveViewBox(begin1);
			
		};
		svg.moveViewBox = function(begin1){
			//alert('avant moveViewBox');
			var width = $(svg).width();
			var height = $(svg).height();
			var begin = svg["begin"];
			var end = svg["end"];
			var scale = svg["scale"];
			var timeStep = svg["step"]["time"];			
			var scrStep = Math.floor(timeStep*scale);
			var grid = $(svg).get(0)["grid"];
			var obselset = $(svg).get(0)["obselset"];
			
			var xmove = -((begin1 - begin)*scale);
			
			for(var name in grid){
				if(!name) continue;
				var el = grid[name];
				if(el.nodeName=="line"){
					var x = el.getAttribute("x1");
					el.setAttribute("x1", parseInt(x) + xmove);
					el.setAttribute("x2", parseInt(x) + xmove);
				}
				else{
					var x = el.getAttribute("x");
					el.setAttribute("x", parseInt(x) + xmove);
				}
			}
			for(var name in obselset){
				if(!name) continue;
				var el = obselset[name];
				
				var x = el.getAttribute("cx");				
				el.setAttribute("cx", parseInt(x) + xmove);
				
			}
			
			var end1 = begin1 + (end-begin);
			svg["begin"] = begin1;			
			svg["end"] = end1;
			//alert('apres moveViewBox');
		};
		
		svg.zoom = function(scale_dt){
			var width = $(svg).width();
			var height = $(svg).height();
			var begin = svg["begin"];
			var end = svg["end"];
			var scale = svg["scale"];
			var timeStep = svg["step"]["time"];
			var scrStep = Math.floor(timeStep*scale);
			var changeGrid = false;
			if(scrStep<=40){
				timeStep = timeStep *2;
				changeGrid = true;
			}
			svg["step"]["time"] = timeStep;
			
			var grid = $(svg).get(0)["grid"];
			var obselset = $(svg).get(0)["obselset"];
			
			//zoom in
			//var scale_dt = 1.25;
			var duration = end-begin;
			var duration1 = Math.floor(duration / scale_dt);
			var begin1 = Math.floor((begin + end)/2 - duration1/2);
			var end1 = Math.floor((begin + end)/2 + duration1/2);
			var scale1 = scale * scale_dt;
			svg["scale"]= scale1;
			svg["begin"]=begin1;
			svg["end"]=end1;
			var scrStep1 = Math.floor(timeStep*scale1);
			
			for(var name in grid){
				if(!name) continue;
				time = parseInt(grid[name]["time"]);
				if(changeGrid || time>end1 || time<begin1){
					delete grid[name];
					$("#"+name).remove();
					console.log("remove "+ time);
				}
			};
			
			// calcul new elements
			
			var time0 = Math.floor(begin1-(begin1%timeStep));
			var x0 = Math.floor((time0 - (begin1 + end1)/2)*scale1 + width/2);
			for (var time=time0;time<=end1;time+=timeStep){								
				if(time>=begin1){
					if($("#line"+time).length==0 && $("#lineM"+time).length==0){
						this.appendGridline(time);
					}
					else{
						var x = x0 + Math.floor((time-time0)*scale1);
						if($("#line"+time).length>0){
							$("#line"+time).attr("x1",x);
							$("#line"+time).attr("x2",x);
						}
						if($("#lineM"+time).length>0){
							$("#lineM"+time).attr("x1",x);
							$("#lineM"+time).attr("x2",x);
							$("#txtM"+time).attr("x",x + 5);
						}
						$("#txt"+time).attr("x",x + 5);
					}
				}
			}
		};
		
		svg.addEventListener("mousedown",function(){console.log("mouse down");},false);
		
		var filter1 = function(){
			var items = obselset;
			var pivottime = new Date();
			var scale = 1;
			var maxx = $("#svg1").width();
			//var hWidth = Math.floor(width/2);
			//var left = -hWidth;
			//var right = hWidth;
			
			var ret = []; 
			$(items).each(function(item){
				var date = item["start"];
				x = date.toX(pivottime,scale);
				if(x>=0 && x<maxx){
					item["x"] = x;
					ret.push(item);
				}		
			});
			return ret;
		};
		
		var filter2 = function(){
			var width = $("#svg1").width();
			var hWidth = Math.floor(width/2);
			var left = -hWidth;
			var right = hWidth;
			
			var minors = [];			
			var minorStep = 10000;
			var majorStep = 60000;		
				
			return minors;
		};
		Date.prototype.toX = function(date1,scale){
			var time = this.getTime();
			var time1 = date1.getTime();
			var x = Math.floor((time - time1)*scale);
			return x;
		};
		
		
		
		
		
	};
	
	
	
};

$(document).ready(function(){
	
	// append trace icon
	var btn_container = $("div[class='container']").find("div[class='nav-collapse collapse']")[0];
	//var btn_container = document.body;
	var start = new trace.StartUI(btn_container);
	var job1 = new trace.Job(function(){
		//alert('ok');
		var host = "http://localhost:8001/";
		var sync1 = new trace.KtbsSync("http://localhost/ozalid/trace/index.php",host+"base1/model1/");
		sync1.toKtbs();
	},5000);
	job1.run();
	$("#traceicon").click();	
});


